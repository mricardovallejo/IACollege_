Docker
------
https://docker-curriculum.com/
https://docker-curriculum.com/#docker-on-aws


Docker: an open-source project that automates the deployment of software applications inside containers by providing an additional layer of abstraction and automation of OS-level virtualization on Linux.
Unlike virtual machines, containers do not have high overhead and hence enable more efficient usage of the underlying system and resources.

Containers take a different approach: by leveraging the low-level mechanics of the host operating system, containers provide most of the isolation of virtual machines at a fraction of the computing power.

But this isolation VMs comes at great cost — the computational overhead spent virtualizing hardware for a guest OS to use is substantial.

Why use containers?
Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run.

Basic commands:

	image:busybox

	$ docker pull busybox
	$ docker images     >>  list of images that I've pulled from the registry
	$ docker run busybox
	$ docker run busybox echo "hello from busybox"
	$ docker ps #command shows you all containers that are currently running.
	$ docker ps -a #non running containers
	$ docker run --help
	$ docker rm 305297d7a235 ff0a5c3750b9
	$ docker rm $(docker ps -a -q -f status=exited)   This command deletes all containers that have a status of exited
	$ docker container prune    This command deletes all containers that have a status of exited


Webapps - static sites
-----------------------
Downloaad and run image:

$ docker run --rm prakhar1989/static-site

	Since the image doesn't exist locally, the client will first fetch the image from the registry and then run the image. 
	If all goes well, you should see a Nginx is running... message in your terminal. Okay now that the server is running, 

$ Ctrl-C stop container

$ docker run -p 8888:80 prakhar1989/static-site

OR

$ docker run -d -P --name static-site prakhar1989/static-site

	-d Detached:  While we're at it, we should also find a way so that our terminal is not attached to the running container.
	-P will publish all exposed ports to random ports 


	To know ports: 
$ docker port static-site
	80/tcp -> 0.0.0.0:32769
	443/tcp -> 0.0.0.0:32768
	You can open http://localhost:32769 
	
$ docker stop static-site

Docker Images
--------------

To get a new Docker image you can either get it from a registry (such as the Docker Hub) or create your own.
 There are tens of thousands of images available on Docker Hub. 
 You can also search for images directly from the command line using docker search.

$ docker pull ubuntu:18.04


An important distinction to be aware of when it comes to images is the difference between base and child images.

	Base images are images that have no parent image, usually images with an OS like ubuntu, busybox or debian.

	Child images are images that build on base images and add additional functionality.
	
Our First Image
---------------

$ git clone https://github.com/prakhar1989/docker-curriculum.git
cd docker-curriculum/flask-app


Dockerfile
----------
	A Dockerfile is a simple text file that contains a list of commands that the Docker client calls while creating an image. 
	It's a simple way to automate the image creation process. 
	The best part is that the commands you write in a Dockerfile are almost identical to their equivalent Linux commands.

	#We start with specifying our base image.
	FROM python:3 

	# set a directory for the app
	WORKDIR /usr/src/app

	# copy all the files to the container
	COPY . .
	 
	# install dependencies
	RUN pip install --no-cache-dir -r requirements.txt

	EXPOSE 5000
	CMD ["python", "./app.py"]
	
	
	--
	
	FROM python:3

	# set a directory for the app
	WORKDIR /usr/src/app

	# copy all the files to the container
	COPY . .

	# install dependencies
	RUN pip install --no-cache-dir -r requirements.txt

	# define the port number the container should expose
	EXPOSE 5000

	# run the command
	CMD ["python", "./app.py"]
	
	-----------
	
Now that we have our Dockerfile, we can build our image. 
The docker build command does the heavy-lifting of creating a Docker image from a Dockerfile.	
	
	$ docker build -t yourusername/catnip .

If you don't have the python:3 image, the client will first pull the image and then create your image. 
Hence, your output from running the command will look different from mine. 
If everything went well, your image should be ready! Run docker images and see if your image shows.

$ docker run -p 8888:5000 yourusername/catnip

The command we just ran used port 5000 for the server inside the container and exposed this externally on port 8888. 
Head over to the URL with port 8888, where your app should be live. (localhost:8888)


Docker on AWS :  publish our image on a registry which can be accessed by AWS. Docker push
-------------

$ docker login
	Login in with your Docker ID to push and pull images from Docker Hub. If you do not have a Docker ID, head over to https://hub.docker.com to create one.
	Username: yourusername
	Password:
	WARNING! Your password will be stored unencrypted in /Users/yourusername/.docker/config.json
	Configure a credential helper to remove this warning. See
	https://docs.docker.com/engine/reference/commandline/login/credential-store
	
LOCAL/DEV:

	$ docker push yourusername/catnip  1.. Once that is done, you can view your image on Docker Hub

	Now that your image is online, anyone who has docker installed can play with your app by typing just a single command.

	$ docker run -p 8888:5000 yourusername/catnip

AWS: - Beanstalk

	AWS Elastic Beanstalk (EB) is a PaaS (Platform as a Service) offered by AWS. If you've used Heroku, Google App Engine etc. 
	you'll feel right at home. As a developer, you just tell EB how to run your app and it takes care of the rest - including scaling, monitoring and even updates. 
	
	EB added support for running single-container Docker deployments which is what we'll use to deploy our app. 
	Although EB has a very intuitive CLI, it does require some setup, and to keep things simple we'll use the web UI to launch our application.

	1) Login to AWS
	2) Click on Beanstalk
		-Create new Application
		-Platform: Docker
		-Upload your code
		-Modify Name image Dockerrun.aws.json in flask application
		
			{
			  "AWSEBDockerrunVersion": "1",
			  "Image": {
				"Name": "prakhar1989/catnip",
				"Update": "true"
			  },
			  "Ports": [
				{
				  "ContainerPort": 5000,
				  "HostPort": 8000
				}
			  ],
			  "Logging": "/var/log/nginx"
			}
	3) TErmionate Environment at the end
	
Creatioon container
------------

	docker create --name nginx-base -p 80:80 nginx:alpine
	docker start nginx-base

	<html>
	<head>
	<title>Hello, Bienvenue</title>
	</head>
	<body>
	<h2>Bienvenue monde!</h2>
	Test de container docker.
	</body>


	$ docker cp index.html nginx-base:/usr/share/nginx/html/index.html/index

	Go to localhost:8080

Création d’une image Docker
-----------------------
	docker commit nginx-base
	docker images
	docker tag e5fd my-nginx   #Ajouter TAG
	docker stop nginx-base
	docker rm nginx-base
	docker run --name bdeb -d -p 80:80 my-nginx

	L'option -p indique à Docker de mapper le port exposé dans le conteneur par l'image NGINX - port 80 - au port spécifié sur l'hôte Docker. 
	Le premier paramètre spécifie le port dans l'hôte Docker(votre machine windows par exemple), 
	tandis que le second paramètre est mappé au port exposé dans le conteneur.

L'option -d spécifie que le conteneur s'exécute en mode détaché, ce qui signifie qu'il continue à s'exécuter jusqu'à l'arrêt mais ne répond pas aux commandes exécutées sur la ligne de commande.

	docker ps

	https://www.taniarascia.com/continuous-integration-pipeline-docker/
	https://www.bmc.com/blogs/machine-learning-containers/
	https://winderresearch.com/a-simple-docker-based-workflow-for-deploying-a-machine-learning-model/

