
-- PRACTIQUE RELATIONSHIPS POSTGRE - MANY TO MANY - Ca marche aussi!!
--=================================

-- https://launchschool.com/books/sql_first_edition/read/multi_tables
-- book has many users, user has many books - Many to Many -- Union Table.

DROP TABLE IF EXISTS users;

CREATE TABLE users (

  user_id serial,
  username VARCHAR(25) NOT NULL,
  enabled boolean DEFAULT TRUE,
  last_login timestamp NOT NULL DEFAULT NOW(),

  PRIMARY KEY (user_id)
);

INSERT into users(username, enabled)  VALUES('John Smith', false);
INSERT into users(username, enabled)  VALUES('John Smith2', false);
INSERT into users(username, enabled)  VALUES('John Smith3', true);
INSERT into users(username, enabled)  VALUES('John Smith4', false);
INSERT into users(username, enabled)  VALUES('John Smith5', true);
INSERT into users(username, enabled)  VALUES('John Smith6', false);

DROP TABLE IF EXISTS books;

CREATE TABLE books (

  book_id serial,
  title VARCHAR(100) NOT NULL,
  author VARCHAR(100) NOT NULL,
  published_date timestamp DEFAULT CURRENT_TIMESTAMP,
  isbn VARCHAR(100),

  PRIMARY KEY (book_id),
  UNIQUE (isbn)
);

ALTER TABLE books
ADD COLUMN user_category VARCHAR(10);

INSERT into books(title, author, isbn, user_category)  VALUES('Simple Taoism', 'Tso', 'aaa-11', 'A');
INSERT into books(title, author, isbn, user_category )  VALUES('Geo & Bio', 'Bio Tso', 'abioa-11','A');
INSERT into books(title, author, isbn, user_category)  VALUES('Sci & IA', 'IA Tso', 'aIAa-11','C');
INSERT into books(title, author, isbn, user_category)  VALUES('Hi Gabo', 'Gabriel Tests', 'abioa-11-X','B');
INSERT into books(title, author, isbn, user_category)  VALUES('Bye Bye', 'Ernest Test', 'aIAa-12','C');

DROP TABLE IF EXISTS reviews;

CREATE TABLE user_books (
  book_id int NOT NULL,
  user_id int NOT NULL,
  checkout_date timestamp,
  return_date timestamp,
  PRIMARY KEY (user_id, book_id),
  FOREIGN KEY (book_id) REFERENCES books(book_id) ON UPDATE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE
);

INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(1, 2, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(1, 3, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(1, 4, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(2, 4, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(3, 4, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(1, 1, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(4, 1, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(4, 2, '2015/01/01 00:00:00', '2015/01/01 00:00:00');
INSERT into user_books(book_id, user_id, checkout_date, return_date)  VALUES(4, 3, '2015/01/01 00:00:00', '2015/01/01 00:00:00');


-- ==FIND==

-- All user_book transactions
SELECT * FROM public.user_books ORDER BY user_id ASC;

-- All transactions user 3 - No information from user
SELECT user_id, book_id, checkout_date FROM public.user_books  WHERE user_id = 3 ORDER BY book_id ASC;


-- All transactions user 3 - with information from user
SELECT book_id, checkout_date, users.username
FROM user_books
INNER JOIN users
ON user_books.user_id = users.user_id
WHERE user_books.user_id = 3
ORDER BY book_id;

-- All transactions with info book & user related
SELECT user_books.user_id, users.username, user_books.book_id, books.title, user_books.checkout_date
FROM user_books
INNER JOIN books ON user_books.book_id = books.book_id
INNER JOIN users ON user_books.book_id = users.user_id


-- All transactions de book=1 with info book & user related
SELECT user_books.user_id, users.username, user_books.book_id, books.title, user_books.checkout_date
FROM user_books
INNER JOIN books ON user_books.book_id = books.book_id
INNER JOIN users ON user_books.book_id = users.user_id
WHERE books.book_id=1






