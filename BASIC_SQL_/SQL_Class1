
Download POSTGRESQL
https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
RolitoIA / 5432 Port

download PGADMIN
https://www.postgresql.org/ftp/pgadmin/pgadmin4/v4.25/windows/
RolitoIA

JOINS
https://www.guru99.com/joins.html

BASIC
https://code.tutsplus.com/articles/sql-for-beginners-part-3-database-relationships--net-8561

kaggle.com/RicardoVallejo using google auth  Page for IA community

=================


create table departments (
    department varchar(100),
    division varchar(100),
    primary key (department)
  );


insert into departments values ('Clothing','Home');
insert into departments values ('Grocery','Home');
insert into departments values ('Decor','Home');
insert into departments values ('Furniture','Home');
insert into departments values ('Computers','Electronics');
insert into departments values ('Device Repair','Electronics');
insert into departments values ('Phones & Tablets','Electronics');


create table regions (
   region_id int,
   region varchar(20),
   country varchar(20),
   primary key (region_id)
  );

insert into regions values (1, 'Southwest', 'United States');
insert into regions values (2, 'Northeast', 'United States');
insert into regions values (3, 'Northwest', 'United States');
insert into regions values (4, 'Central', 'Asia');
insert into regions values (5, 'East Asia', 'Asia');
insert into regions values (6, 'Quebec', 'Canada');
insert into regions values (7, 'Nova Scotia', 'Canada');


create table employees (
	employee_id INT,
	first_name VARCHAR(50),
	last_name VARCHAR(50),
	email VARCHAR(50),
	hire_date DATE,
	department VARCHAR(17),
	gender VARCHAR(1),
	salary INT,
	region_id INT,
	primary key (employee_id)
);

insert into employees values (1, 'Berrie', 'Manueau', 'bmanueau0@dion.ne.jp', '2006-04-20', 'Sports', 'F', 154864, 4);
insert into employees values (2, 'Aeriell', 'McNee', 'amcnee1@google.es', '2009-01-26', 'Tools', 'F', 56752, 3);
insert into employees values (3, 'Sydney', 'Symonds', 'ssymonds2@hhs.gov', '2010-05-17', 'Clothing', 'F', 95313, 4);
insert into employees values (4, 'Avrom', 'Rowantree', null, '2014-08-02', 'Phones & Tablets', 'M', 119674, 7);
insert into employees values (5, 'Feliks', 'Morffew', 'fmorffew4@a8.net', '2003-01-14', 'Computers', 'M', 55307, 5);
insert into employees values (6, 'Bethena', 'Trow', 'btrow5@technorati.com', '2003-06-08', 'Sports', 'F', 134501, 3);
insert into employees values (7, 'Ardeen', 'Curwood', 'acurwood6@1und1.de', '2006-02-19', 'Clothing', 'F', 28995, 7);


======= SELECT ==============

SELECT * FROM employes

SELECT * FROM departments wehere department='Garden'


SELECT numero_id, code_postal, date_poste
FROM data_maisons_vendre
WHERE  prix  between 450000 and 550000 and
substr(code_postal,3,1) ='J';

SELECT numero_id, code_postal, date_poste
FROM data_maisons_vendre
WHERE  prix >=550000 and ( substr(code_postal,3,1) ='J' or code_postal in ('H2V2H1', ‘H2Y7L1', 'H2W1D1'));


SELECT * from departments where department like '%den%';

SELECT numero_id, code_postal, date_poste
FROM data_maisons_vendre
WHERE  prix >=550000 and  substr(code_postal,3,1) ='J' ORDER BY numero_id ;


======== JOINS =============

CREATE TABLE maisons_a_vendre_in_vendus  AS
SELECT  A.*, B.*
FROM data_maisons_vendre AS A
INNER JOIN data_maisons_vendus AS B
ON A.numero_id= B.numero_id;


CREATE TABLE maisons_a_vendre_left_vendus AS
SELECT  A.numero_id, A.prix AS prix_vente, B.prix AS prix_vendu
FROM data_maisons_vendre AS A
LEFT JOIN data_maisons_vendus  AS B
ON A. numero_id= B. numero_id;


CREATE TABLE maisons_a_vendre_RIGHT_vendus AS
SELECT  A.numero_id, A.prix AS prix_vente, B.prix AS prix_vendu
FROM data_maisons_vendre AS A
RIGHT JOIN data_maisons_vendus  AS B
ON A.numero_id = B.numero_id;

CREATE TABLE maisons_a_vendre_vendus AS
SELECT  A. numero_id, A.code_postal, A.date_poste , B.date_vendu
FROM data_maisons_vendre AS A
FULL JOIN data_maisons_vendus  AS B
ON A.numero_id = B. numero_id;

============== AGREGATION ====================


CREATE TABLE summary_note_math AS
SELECT avg(note_math) as moyenne, sum(note_math) as somme, min(note_math) as minimum,
max(note_math) as maximum, count(distinct nom) as nombre_etudiants
FROM data_etudiants;

CREATE TABLE summary_note_math_sexe AS
SELECT sexe, avg(note_math) as moyenne, sum(note_math) as somme,
min(note_math) as minimum, max(note_math) as maximum,
count(distinct nom) as nombre
FROM data_etudiants
GROUP BY sexe;

#### Le sece dans les group et dans le select si non ca marche pas


SELECT substr(code_postal,1,3) as RTA ,
count(distinct nom) as nbr_etudiants,
avg(frais_de_scolarite) as moyenne_frais
FROM data_etudiants
GROUP BY RTA
HAVING nbr_etudiants>36;

########HAVING actua sobre los subgrupos.  Find all groups with number of users > 36


SELECT provenance, avg(note_francais) as moyenne_francais,
count(distinct nom) as nbr_etudiants
FROM data_etudiants
WHERE sexe="F"
GROUP BY provenance
HAVING count(distinct nom)>42
ORDER BY moyenne_francais DESC;



====================SOUS - REQUETE ========================================

Correlies (le resultate de un requete es utlise pour la autre requete)  et no correlait si sont interdependants

CREATE TABLE exemple_ss_requete1 AS
SELECT sexe, avg(note_math) as moyenne, sum(note_math) as somme,  sum(case when note_math>=65 then 1 else 0 end)/(select count(distinct nom) FROM data_etudiants) as pct_65
FROM data_etudiants
GROUP BY sexe;

============= CASE =============

Select  nom attribut, nom attribut, …
Case
   WHEN  condition THEN action(s)
   WHEN  condition THEN action(s)
   ELSE
   End  as nom-case
From nom table, nom table


case nom-case il est le resultat des actions

Create table data_maison_cswhn  as
Select *, case when prix >500000 then 1 else 0 end as  prix_5000
From data_maisons_vendre;


=========

Select first_name, salary,
CASE
    WHEN salary < 10000 THEN 'sous paye'
	WHEN salary >10000 and salary < 100000 THEN 'paye'
	WHEN salary > 100000 THEN 'sur paye'
	ELSE 'non-paye'
END
FROM employees
Order by salary desc;

=================================

Select first_name, salary,
CASE
    WHEN salary < 10000 THEN 'sous paye'
	WHEN salary >10000 and salary < 100000 THEN 'paye'
	WHEN salary > 100000 THEN 'sur paye'
	ELSE 'non-paye'
END as Category
FROM employees
Order by salary desc;

=======================  WINDOWING PLUS FACIL LE DIFFICILE ============================================

Exemple 1:
select first_name, department, count(*) over()
from employees;

Cest comme une groupeby que permite afficher donnes de tables related plus resultat de acumulation ou grouping
cest une groupby avec steroides.

Exemple 2:
select first_name, department, count(*) over(PARTITION by department)
from employees;

=======================================================

Exemple 1:
select first_name, hire_date, salary
from employees
Order by hire_date;

Scénario 2:
Ecrire une requête qui compte le total des salaires par date d’embauche
Indices : date d’embauche = un ordre à respecter

select first_name, hire_date, salary,
SUM(salary) OVER(order by hire_date  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
as total_salay_by_hire_date
from employees;

Exercice: Exécuter puis expliquer les résultats de la requête:
select first_name, hire_date, salary, department,
SUM(salary) OVER(PARTITION by department order by hire_date  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
as total_salay_by_hire_date
from employees;


============== RANK ===================

Ecrire une requête qui détermine les rangs des employées par salaire
(l’employée qui gagne le plus gros salaire, …etc.)
select first_name, salary, department,
Rank() OVER(PARTITION By department ORDER BY salary DESC)
as total_salay_by_hire_date
from employees;

Ecrire une requête qui détermine les 3 premiers rangs des employées par salaire
(l’employée qui gagne le plus gros salaire, …etc.)

Select * from (
select first_name, salary, department, RANK() OVER(PARTITION By department ORDER BY salary DESC)
from employees) a where rank <=3




=======IMPORT INFO FORM CSV

COPY data_etudiants_notes
FROM 'C:\Users\valm044\Desktop\IA COLLEGE BNC\sql Information\datafiles\data_etudiants_notes.xls'
DELIMITER ','
CSV HEADER

=======CREATE TABLES FROM REQUETE

CREATE TABLE new_data_maisons55_J AS
SELECT numero_id, code_postal, date_poste
FROM data_maisons_vendre
WHERE  prix >=550000 and ( substr(code_postal,3,1) ='J'
or code_postal LIKE 'H3S%’ );


CREATE TABLE new_data_maisons AS
SELECT numero_id, code_postal AS cp , substr(code_postal,1,1) AS region FROM data_maisons_vendre;

==============================

DELETE FROM data_foret WHERE numero_arbre='56SA554S6';

======================
Efface tout le table

DROP TABLE data_foret;

==========================

NTILE


Ecrire une requête qui détermine les rangs des employées par salaire
( les 5 premiers les mettre au rang 1, les 5 suivants les mettre au 2, …

select first_name, salary, department,
NTILE(5) OVER(PARTITION By department ORDER BY salary DESC)
from employees;


===========================

nthValue, firsValue and PARTITION


Scenario:
Ecrire une requête qui détermine le premier salaire de chaque département

select first_name, salary, department,
first_value(salary) OVER(PARTITION By department ORDER BY salary DESC)
As first_salary
from employees;


Le 3 premiere salaies por departament

select first_name, salary, department,
nth_value(salary,3) OVER(PARTITION By department ORDER BY first_name DESC)
As first_salary
from employees;



=====================

Lead() Lag()


-------------------------------------



